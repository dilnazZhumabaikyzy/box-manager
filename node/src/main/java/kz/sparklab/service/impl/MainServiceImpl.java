package kz.sparklab.service.impl;

import kz.sparklab.dto.CallbackResponse;
import kz.sparklab.service.MainService;
import kz.sparklab.service.ProducerService;
import kz.sparklab.service.RestService;
import kz.sparklab.utils.KeyBoardUtils;
import kz.sparklab.utils.MessageFormatter;
import lombok.extern.log4j.Log4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.HashMap;

import static kz.sparklab.service.enums.BotCallbacks.*;
import static kz.sparklab.service.enums.BotCommands.HELP;
import static kz.sparklab.service.enums.BotCommands.START;


@Service
@Log4j
public class MainServiceImpl implements MainService {

    private static final String HELP_TEXT = "/get_fullness - for getting fullness of all boxes\n";
    private static final String GREETING_TEXT = """
            –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–∫—Å–∞–º–∏ —Å –æ–¥–µ–∂–¥–æ–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞.‚Ä®
                                
            –í–æ—Ç –º–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:‚Ä®‚Ä®
                              
            1. **–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å**: –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ–∫—Å–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö –≥–æ—Ä–æ–¥–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É ‚Ä®‚Ä®
                                
            2. **–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**: –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω—è –∫–æ–≥–¥–∞ –∫–∞–∫–æ–π —Ç–æ –∏–∑ –±–æ–∫—Å–æ–≤ –∑–∞–ø–ª–Ω–∏—Ç—å—Å—è.
                                
            3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è): –í –±—É–¥—É—â–µ–º –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –æ–¥–µ–∂–¥—ã.
            """;
    private static final String FULLNESS_EXAMPLE = """
            1. –î–æ—Å—Ç—ã–∫ –ü–ª–∞–∑–∞                          \s
                üü• üü• üü• üü• üü• üü• üü• üü• üü• üü•  97%
                            
            2. –ê—Å—Ç–∞–Ω–∞ –¢–∞—É—ç—Ä—Å                         \s
                üü• üü• üü• üü• üü• üü• üü• üü• üü•  86%
                            
            3. –ë–∞–π—Ç–µ—Ä–µ–∫                              \s
                üü• üü• üü• üü• üü• üü• üü• üü•  80%
                            
            4. –ú—É–∑–µ–π                                 \s
                üü® üü® üü® üü® üü® üü® üü®  75%
                            
            5. –•–∞–Ω –®–∞—Ç—ã—Ä                             \s
                üü© üü© üü©  35%
                            
            6. –•–∞–Ω –®–∞—Ç—ã—Ä                             \s
                üü© üü© üü©  35%
            """;

    private final ProducerService producerService;
    private final KeyBoardUtils keyBoardUtils;
    private final RestService restService;
    private final MessageFormatter messageFormatter;

    public MainServiceImpl(ProducerService producerService, KeyBoardUtils keyBoardUtils, RestService restService, MessageFormatter messageFormatter) {
        this.producerService = producerService;
        this.keyBoardUtils = keyBoardUtils;
        this.restService = restService;
        this.messageFormatter = messageFormatter;
    }


    @Override
    public void processTextMessage(Update update) {
        var message = update.getMessage();

        var outputMessage = processServiceCommand(message);

        sendAnswer(outputMessage);
    }

    @Override
    public void processCallbackQuery(Update update) {
        var callback = update.getCallbackQuery();

        var outputMessage = processCallbackContent(callback);

        sendCallbackAnswer(outputMessage);
    }

    private SendMessage processServiceCommand(Message message) {
        var text = message.getText();

        if (SHOW_FULLNESS.isEqual(text)) {
            return getFullnessInfo(message);
        } else if(FOLLOW_NOTIFICATIONS.isEqual(text)) {
            return followNotification(message);
        } else if (HELP.equals(text)) {
            return getHelpMessage(message);
        } else if (START.equals(text)) {
            return getGreetingMessage(message);
        } else {
            return getUnavailableCommandMessage(message);
        }
    }

    private CallbackResponse processCallbackContent(CallbackQuery callback) {
        var callbackData = callback.getData();

        if (SHOW_ONLY_RED.isEqual(callbackData)
                || SHOW_ONLY_GREEN.isEqual(callbackData)
                || SHOW_ONLY_YELLOW.isEqual(callbackData)) {
            return getFullnessInfo(callbackData, callback);
        }

        return CallbackResponse.builder()
                .answerCallbackQuery(
                        AnswerCallbackQuery.builder()
                                .callbackQueryId(callback.getId())
                                .text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                                .build()
                )
                .build();
    }

    private SendMessage followNotification(Message message) {
        return SendMessage.builder()
                .text("–í—Ä–µ–º–µ–Ω–Ω–æ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ :(")
                .chatId(message.getChatId())
                .build();
    }

    private CallbackResponse getFullnessInfo(String color, CallbackQuery callback) {

        AnswerCallbackQuery answerCallbackQuery = AnswerCallbackQuery.builder()
                .callbackQueryId(callback.getId())
                .text(color)
                .build();

        SendMessage sendMessage = SendMessage.builder()
                .text(color)
                .chatId(callback.getMessage().getChatId())
                .build();

        return CallbackResponse.builder()
                .answerCallbackQuery(answerCallbackQuery)
                .sendMessage(sendMessage)
                .build();
    }

    private SendMessage getFullnessInfo(Message message) {
        HashMap<String, Integer> map = restService.getFullnessFromAPI();


        return SendMessage.builder()
                .chatId(message.getChatId())
                .text(messageFormatter.getFullnessMessage(map))
                .replyMarkup(keyBoardUtils.getInlineKeyboardMarkup(
                        SHOW_ONLY_RED.toString(),
                        SHOW_ONLY_YELLOW.toString(),
                        SHOW_ONLY_GREEN.toString(),
                        "hi"))
                .build();
    }

    private SendMessage getUnavailableCommandMessage(Message message) {
        return SendMessage.builder()
                .text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                .chatId(message.getChatId())
                .build();
    }

    private SendMessage getHelpMessage(Message message) {
        return SendMessage.builder()
                .text(HELP_TEXT)
                .chatId(message.getChatId())
                .build();
    }

    private SendMessage getGreetingMessage(Message message) {
        return SendMessage.builder()
                .chatId(message.getChatId())
                .text(GREETING_TEXT)
                .replyMarkup(keyBoardUtils.getReplyKeyBoardMarkup(
                        SHOW_FULLNESS.toString(),
                        FOLLOW_NOTIFICATIONS.toString()))
                .build();


    }

    private void sendAnswer(SendMessage sendMessage) {
        producerService.produceAnswer(sendMessage);
    }
    private void sendCallbackAnswer(CallbackResponse callbackResponse) {
        if (callbackResponse.getAnswerCallbackQuery() != null)
            producerService.produceCallbackAnswer(callbackResponse.getAnswerCallbackQuery());

        if (callbackResponse.getSendMessage() != null)
            producerService.produceAnswer(callbackResponse.getSendMessage());
    }
}
